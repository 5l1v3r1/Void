#pragma once
#ifndef _V_COLOR_H_
#define _V_COLOR_H_
#include "../Structure/Vector/VVector.h"

//----------------------------------------------------------------------------------------------------
namespace Void
{
    // YUV And RGB
    //----------------------------------------------------------------------------------------------------
    // Y = 0.299 * R + 0.587 * G + 0.114 * B
    // U = -0.147 * R - 0.289 * G + 0.436 * B = 0.492 * (B - Y)
    // V = 0.615 * R - 0.515 * G - 0.100 * B = 0.877 * (R - Y)
    //
    // R = Y + 1.140 * V
    // G = Y - 0.394 * U - 0.581 * V
    // B = Y + 2.032 * U
    
    // YCbCr And RGB
    //----------------------------------------------------------------------------------------------------
    // Y = 0.257 * R + 0.504 * G + 0.098 * B + 16
    // Cb = -0.148 * R - 0.291 * G + 0.439 * B + 128
    // Cr = 0.439 * R - 0.368 * G - 0.071 * B + 128
    //
    // R = 1.164 * (Y - 16) + 1.596 * (Cr - 128)
    // G = 1.164 * (Y - 16) - 0.813 * (Cr - 128) - 0.392 * (Cb - 128)
    // B = 1.164 * (Y - 16) + 2.017 * (Cb - 128)
    
    // YV12
    //----------------------------------------------------------------------------------------------------
    // YV12 (4 : 2 : 0)
    // Y(width * heigth) + V(width * heigth / 4) + U(width * heigth / 4)
    // size: width * heigth * 1.5 Byte
    
    // I420
    //----------------------------------------------------------------------------------------------------
    // I420 (4 : 2 : 0)
    // Y(width * heigth) + U(width * heigth / 4) + V(width * heigth / 4)
    // size: width * heigth * 1.5 Byte
    
    // VColorFormat
    //----------------------------------------------------------------------------------------------------
    enum VColorFormat
    {
        V_COLOR_FORMAT_FLOAT = 0,
        V_COLOR_FORMAT_256 = 1,
    };
    
    // VColor
    //----------------------------------------------------------------------------------------------------
    class VColor : public VVector<float, 4>
    {
    public:
        //----------------------------------------------------------------------------------------------------
        VColor();
        VColor(const float _r, const float _g=0.f, const float _b=0.f, const float _a=1.f);
        VColor(const VColor& _color);
        virtual ~VColor();
        
        //----------------------------------------------------------------------------------------------------
        inline VColor& operator= (const VVector<float, 4>& _vector)
        {
            for (size_t i = 0; i < 4; ++i)
            {
                vector[i] = _vector.vector[i];
            }
            return *this;
        }
        
        inline VColor& operator= (const VColor& _color)
        {
            for (size_t i = 0; i < 4; ++i)
            {
                vector[i] = _color.vector[i];
            }
            m_format = _color.m_format;
            return *this;
        }
        
    protected:
        //----------------------------------------------------------------------------------------------------
        VColorFormat m_format;
    };
}

#endif
